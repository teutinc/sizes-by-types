#!/bin/bash

#########################################
# Script to get the sizes by files type #
#                                       #
# @author Augustin Peyrard              #
DATE=2014/05/08
VERSION=0.2
#########################################

# Display the help
usage() {
    cat << EOF
usage: ${0##*/} [OPTIONS] path

OPTIONS:
    -t or --type [type(s)]    -- specify the type(s) of files (types must be separated by :)
    -v or --verbose           -- verbose output
    -h or --human-readable    -- display size in human readable format
    -k or --kilobytes         -- display size in kilobytes
    -s or --sort              -- sort the results by their sizes (ascendingly)
    -r or --reverse-sort      -- reverse sort
    --help                    -- print help
    --version                 -- print version
EOF
}

# Display the version
version() {
    cat << EOF
${0##*/} $VERSION (release date: $DATE)
EOF
}

# transform size into human readable format
pretty_size() {
    local kb=$1

    # try to convert into megabytes
    local tmpMB=$(bc <<< "scale=1; $kb/(1024)")
    if [[ $tmpMB < 1 ]]; then
        echo "${kb}K"
        return
    fi
    if [[ $tmpMB = "1.0" ]]; then
        echo "1M"
        return
    fi
    if [[ ${tmpMB%.*} -lt 10 ]]; then
        echo "${tmpMB}M"
        return
    fi

    # try to convert into gigabytes
    local tmpGB=$(bc <<< "scale=1; $kb/(1024*1024)")
    if [[ $tmpGB < 1 ]]; then
        echo "${tmpMB%.*}M"
        return
    fi
    if [[ $tmpGB = "1.0" ]]; then
        echo "1G"
        return
    fi
    if [[ ${tmpGB%.*} -lt 10 ]]; then
        echo "${tmpGB}G"
        return
    fi
    echo "${tmpGB%.*}G"
}

printed_results=0
total_size_and_nb="0:0"
buffer=""
# extract the result of the find, and print them
extract_and_print_results() {
    local size_and_nb=$1
    local type=$2
    local bufferize=$3
    local size_and_nb_splitted=(${size_and_nb//:/ })
    local nb_files=${size_and_nb_splitted[0]}
    local size=${size_and_nb_splitted[1]}

    # update the total
    local total=(${total_size_and_nb//:/ })
    total_size_and_nb=$((${total[0]}+$nb_files))':'$((${total[1]}+$size))

    # generate result line
    local line=""
    if [[ $unit = "h" ]]; then
        size_h=$(pretty_size $size);
        line=`printf '%4s %s (%s)' $size_h $type $nb_files`
    else
        line=`printf '%-7s %s (%s)' $size $type $nb_files`
    fi

    # print result (might be on screen, or in buffer)
    if [[ -n $bufferize && $bufferize -gt 0 ]]; then
        # print the size in the buffer, it will be used for sorting
        buffer=$buffer`printf '%s %s%s' $size "$line" ':'`
    else
        printf '%s\n' "$line"
    fi

    printed_results=$((printed_results + 1))
}

# initialize customizable vars
types=""
verbose=0
unit="k"
sort=0

verbose_vars() {
    cat << EOF
=== Parameters ===
    + types=$types
    + unit=$unit
    + sort=$sort
    + verbose=$verbose
EOF
}

toggle_verbose() {
    verbose=$((verbose + 1))
}

toggle_unit() {
    unit=$1
}

toggle_sort() {
    sort=$1
}

# extract short options from a string
parse_short_options() {
    char=$1
    for (( i=0; i<${#char}; i++)); do
        case ${char:$i:1} in
            v)
                toggle_verbose
                ;;
            h)
                toggle_unit "h"
                ;;
            k)
                toggle_unit "k"
                ;;
            s)
                toggle_sort 1
                ;;
            r)
                toggle_sort 2
                ;;
            *)
                echo "no letter"
                usage
                exit 1
                ;;
        esac
    done
}

# analyze the command line
while :
do
    case $1 in
        -t | --type)
            types="$types ${2//:/ }"
            shift 2
            ;;
        --verbose)
            toggle_verbose
            shift
            ;;
        --human-readable)
            toggle_unit "h"
            shift
            ;;
        --kilobytes)
            toggle_unit "k"
            shift
            ;;
        --sort)
            toggle_sort 1
            shift
            ;;
        --reverse-sort)
            toggle_sort 2
            shift
            ;;
        --help)
            usage
            exit 0
            ;;
        --version)
            version
            exit 0
            ;;
        --*)
            echo "long args unknown"
            usage
            exit 1
            ;;
        -*)
            parse_short_options ${1:1}
            shift
            ;;
        *)
            break
            ;;
    esac
done

# verbose parameters
[[ $verbose > 0 ]] && verbose_vars

# check if the path is defined
if [[ -z $1 ]]; then
    usage
    exit 1
fi
path="$1"
if [[ ! -d "$path" ]]; then
    echo "$0: $path is not a directory"
    exit 2
fi

# verbose path
[[ $verbose > 0 ]] && echo "=== Path: $path ==="


# get all file types
forced_types=1
if [[ -z $types ]]; then
    forced_types=0
    pattern="[a-zA-Z0-9_-]"
    types=`find "$path" -type f |grep -o "\.$pattern*$"|grep -o "$pattern*$"|sort|uniq`
    [[ $verbose > 0 ]] && nb=`echo -n "$types" | wc -l` && echo "=== Found $nb type(s) ==="
fi
for type in $types; do
    [[ $verbose > 0 ]] && echo "=== Scanning for type: $type ==="

    # for each file, calculate the aggregate the size and count the number of files
    size_and_nb=`find "$path" -name "*$type" -exec du -sk {} \; | awk '{nb++;total += $1} END {print nb":"total}'`

    # print results
    if [[ $size_and_nb != ':' ]]; then
        extract_and_print_results $size_and_nb $type $sort
    fi
done

# analyze the size and the number of non parsed files (only if the types has not been forced)
if [[ $forced_types = 0 ]]; then
    [[ $verbose > 0 ]] && echo "=== Scaning for OTHERS files ==="
    ftypes+=(-type f)
    for type in $types; do ftypes+=(-and -not -name \"*.$type\"); done
    size_and_nb=`eval find \"$path\" ${ftypes[@]} "-exec" "du" "-sk" "{}" "\;" "|" "awk '{nb++;total += \\$1} END {print nb\":\"total}'"`
    if [[ ! $size_and_nb = ":" ]]; then extract_and_print_results $size_and_nb "OTHERS" $sort; fi
fi

# check if some sorting is required
if [[ $sort -gt 0 ]]; then
    [[ $sort -eq 1 ]] && sort_param='' || sort_param='r'
    # sort the buffer, but remove the size prefix, used only for sorting
    echo -n "$buffer"|tr ':' '\n'|sort -n$sort_param|cut -d ' ' -f2-
fi

# print the total lines, print the total sizes and number of files, only if more than one line has been printed
if [[ $printed_results -gt 1 ]]; then
    extract_and_print_results $total_size_and_nb TOTAL;
fi
