#!/bin/bash

#########################################
# Script to get the sizes by files type #
#                                       #
# @author Augustin Peyrard              #
# @date 2014/05/06                      #
VERSION=0.1
#########################################

# Display the help
usage() {
    cat << EOF
usage: ${0##*/} [OPTIONS] path

OPTIONS:
    -t or --type [type]       -- specify the type of files [Not Yet Implemented]
    -v or --verbose           -- verbose output [Not Yet Implemented]
    -h or --human-readable    -- display size in human readable format [Not Yet Implemented]
    -k or --kilobytes         -- display size in kilobytes [Not Yet Implemented]
    -b or --bytes             -- display size in bytes [Not Yet Implemented]
    -s or --sort              -- sort the results by their sizes (ascendingly) [Not Yet Implemented]
    -r or --reverse-sort      -- reverse sort [Not Yet Implemented]
    --help                    -- print help [Not Yet Implemented]
    --version                 -- print version [Not Yet Implemented]
EOF
}

# Display the version
version() {
    cat << EOF
${0##*/} $VERSION
EOF
}

# initialize customizable vars
type=""
verbose=0
unit="k"
sort=0

verbose_vars() {
    cat << EOF
=== Parameters ===
    + type=$type
    + unit=$unit
    + sort=$sort
    + verbose=$verbose
EOF
}

toggle_verbose() {
    verbose=$((verbose + 1))
}

toggle_unit() {
    unit=$1
}

toggle_sort() {
    sort=$1
}

# extract short options from a string
parse_short_options() {
    char=$1
    for (( i=0; i<${#char}; i++)); do
        case ${char:$i:1} in
            v)
                toggle_verbose
                ;;
            h)
                toggle_unit "h"
                ;;
            k)
                toggle_unit "k"
                ;;
            b)
                toggle_unit "b"
                ;;
            s)
                toggle_sort 1
                ;;
            r)
                toggle_sort 2
                ;;
            *)
                echo "no letter"
                usage
                exit 1
                ;;
        esac
    done
}

# analyze the command line
while :
do
    case $1 in
        -t | --type)
            type=$2
            shift 2
            ;;
        --verbose)
            toggle_verbose
            shift
            ;;
        --human_readable)
            toggle_unit "h"
            shift
            ;;
        --kilobytes)
            toggle_unit "k"
            shift
            ;;
        --bytes)
            toggle_unit "b"
            shift
            ;;
        --sort)
            toggle_sort=1
            shift
            ;;
        --reverse-sort)
            toggle_sort=2
            shift
            ;;
        --help)
            usage
            exit 0
            ;;
        --version)
            version
            exit 0
            ;;
        --*)
            echo "long args unknown"
            usage
            exit 1
            ;;
        -*)
            parse_short_options ${1:1}
            shift
            ;;
        *)
            break
            ;;
    esac
done

# verbose parameters
[[ $verbose > 0 ]] && verbose_vars

# check if the path is defined
if [[ -z $1 ]]; then
    usage
    exit 1
fi
path="$1"
if [[ ! -d "$path" ]]; then
    echo "$0: $path is not a directory"
    exit 2
fi

# verbose path
[[ $verbose > 0 ]] && echo "=== Path: $path ==="


# get all file types
types=`find "$path" -type f |grep -o "\.[a-zA-Z]*$"|grep -o "[a-zA-Z]*$"|sort|uniq`
[[ $verbose > 0 ]] && nb=`echo -n "$types" | wc -l` && echo "=== Found $nb type(s) ==="
for type in $types; do
    [[ $verbose > 0 ]] && echo "=== Scanning for type: $type ==="

    # for each file, calculate the aggregate the size and count the number of files
    size_and_nb=`find "$path" -name "*$type" -exec du -sk {} \; | awk '{nb++;total += $1} END {print nb":"total}'`
    size_and_nb_splitted=(${size_and_nb//:/ })

    # print results
    plural=""
    if [[ ${size_and_nb_splitted[0]} > 1 ]]; then
        plural="s"
    fi
    echo "${size_and_nb_splitted[1]}K for ${size_and_nb_splitted[0]} file$plural with extension \"$type\""
done
